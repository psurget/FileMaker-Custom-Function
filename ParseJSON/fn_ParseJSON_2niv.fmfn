Let(
    [
        CodeClean =
        Substitute(
            JSON;
            [ "\""; "" ];
            [ "["; "^¶" ];
            [ "]"; "/^¶" ];
            [ ":{"; "^¶" ];
            [ "},"; "/^¶" ];
            [ "{"; "" ];
            [ "}"; "" ];
            [ ","; "¶" ]
        );
        //Clean up the code
        start = Position( CodeClean; node & ":"; 1; instance );
        //Find where the node is
        vCount = PatternCount( Left( CodeClean; start ); "¶" ) + 1;
        //Find the value position
        Array.start = Position( CodeClean; Node & "^"; start; 1 );
        //Find where the under node begins
        Array.end = Position( CodeClean; "/^"; array.start; 1 );
        //Find where the under node ends
        CleanArray =
        Middle( CodeClean; array.start; array.end - array.start );
        underNode.start =
        Position( CodeClean; underNode & ":"; 1; UN_instance );
        //Find where the undernode is
        underNode.value =
        Position( CleanArray; underNode & ":"; 1; UN_instance );
        //Find where the node is
        vCount.UnderNode =
        PatternCount( Left( CleanArray; underNode.value ); "¶" ) + 1;
        //Find the value position
        Result =
        If(
            IsEmpty( underNode );
            Substitute( GetValue( CodeClean; vCount ); node & ":"; "" );
            Substitute( GetValue( CleanArray; vCount.UnderNode ); underNode & ":"; "" )
        )
        //get the value and remove the node name
    ];

    Trim( result )
)
